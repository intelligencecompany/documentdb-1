name: Deploy to GitHub Packages and Azure VM

on:
  push:
    branches:
      - main

jobs:
  # build:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v2

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1

  #     - name: Log in to GitHub Packages
  #       run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

  #     - name: Build and push Docker image
  #       run: |
  #         git clone https://github.com/${{ github.repository }}.git
  #         docker build . -f .devcontainer/Dockerfile -t documentdb
  #         docker image tag documentdb ghcr.io/${{ github.repository }}/documentdb:latest
  #         docker image ls
  #         docker image push ghcr.io/${{ github.repository }}/documentdb:latest

  # infra:
  #   runs-on: ubuntu-latest
  #   needs: build

  #   steps:
  #     - name: Azure CLI Login
  #       uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS }}
      
  #     # - name: Update GitHub Secret with Private Key
  #     #   env:
  #     #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     #   run: |
  #     #     gh secret set AZURE_SSH_PRIVATE_KEY -b "${{ steps.create-ssh-key.outputs.private_key }}" -R ${{ github.repository }}
          
  #     - name: Create Azure VM if not exists
  #       run: |
  #         az vm create \
  #           --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
  #           --name TERMSMONITOR \
  #           --image Ubuntu2404 \
  #           --admin-username azureuser \
  #           --generate-ssh-keys \
  #           --size Standard_B1s \
  #           --output none || echo "VM already exists"

  #     - name: Get VM public IP
  #       id: get-vm-ip
  #       run: |
  #         echo "VM_IP=$(az vm show --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name TERMSMONITOR --show-details --query publicIps -o tsv)" >> $GITHUB_ENV
      
  #     - name: Configure SSH
  #       uses: webfactory/ssh-agent@v0.7.0
  #       with:
  #         ssh-private-key: ${{ secrets.AZURE_SSH_PRIVATE_KEY }}

  #     - name: Install Docker on VM
  #       run: |

  #         # SSH into the VM and install Docker
  #         ssh -o StrictHostKeyChecking=no azureuser@${{ env.VM_IP }} << 'EOF'
  #           sudo apt-get update
  #           sudo apt-get install -y docker.io
  #           sudo systemctl start docker
  #           sudo systemctl enable docker
  #         EOF
  
  deploy:
    runs-on: ubuntu-latest
    # needs: build

    steps:
      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get VM public IP
        id: get-vm-ip
        run: |
          echo "VM_IP=$(az vm show --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name TERMSMONITOR --show-details --query publicIps -o tsv)" >> $GITHUB_ENV
      
      - name: Configure SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.AZURE_SSH_PRIVATE_KEY }}

      - name: Add user to docker group
        run: |
          ssh -o StrictHostKeyChecking=no azureuser@${{ env.VM_IP }} << 'EOF'
            echo "your_password" | sudo -S usermod -aG docker azureuser
          EOF
      
      - name: Pull and run Docker image on VM
        run: |
          ssh -o StrictHostKeyChecking=no azureuser@${{ env.VM_IP }} << 'EOF'
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
            docker pull ghcr.io/${{ github.repository }}/documentdb:latest
            docker rm -f documentdb 2>/dev/null || true
            docker run -p 9712:9712 --name documentdb --restart=on-failure:3 -i ghcr.io/${{ github.repository }}/documentdb
          EOF
# docker run -p 9712:9712 --name documentdb -i ghcr.io/intelligencecompany/documentdb-1/documentdb
      # - name: Pull and run Docker image on VM
      #   run: |
      #     ssh -o StrictHostKeyChecking=no azureuser@${{ env.VM_IP }} << 'EOF'
      #       CONTAINER_NAME="documentdb"
      #       docker rm -f $CONTAINER_NAME 2>/dev/null || true
      #       [ -d "/home/$CONTAINER_NAME" ] && sudo rm -rf "/home/$CONTAINER_NAME"

      #       sudo git clone https://github.com/${{ github.repository }}.git /home/$CONTAINER_NAME
      #       cd /home/$CONTAINER_NAME

      #       docker build . -f .devcontainer/Dockerfile -t $CONTAINER_NAME
      #       docker run -p 9712:9712 -v $(pwd):/home/$CONTAINER_NAME/code -i $CONTAINER_NAME

      #       if ! docker ps --format "{{.Names}}" | grep -q "^$CONTAINER_NAME$"; then
      #         echo "Error: The container '$CONTAINER_NAME' is not running. Start the container first."
      #         exit 1
      #       fi

      #       docker exec -it "$CONTAINER_NAME" bash -c "
      #         cd /home/$CONTAINER_NAME/code || exit 1
      #         echo 'Switched to code directory.'

      #         # Build and deploy binaries
      #         echo 'Building binaries...'
      #         make || { 
      #           echo 'Build failed. Adding safe directory configuration.';
      #           git config --global --add safe.directory /home/$CONTAINER_NAME/code
      #           make
      #         }

      #         echo 'Installing binaries...'
      #         sudo make install

      #         echo 'Running PostgreSQL backend tests...'
      #         make check

      #         echo 'Starting DocumentDB server...'
      #         ./scripts/start_oss_server.sh
              
      #         echo 'Resetting DocumentDB server...'
      #         ./scripts/start_oss_server.sh -c

              # echo "host    all             all             94.215.14.79/32               trust" >> ~/documentdb_test/pg_hba.conf
              # echo "host    all             all             192.168.178.43/32             trust" >> ~/documentdb_test/pg_hba.conf
              # echo "host    all             all             172.17.0.4/32             trust" >> ~/documentdb_test/pg_hba.conf
              # echo "host    all             all             0.0.0.0/32             trust" >> ~/documentdb_test/pg_hba.conf
              # echo "listen_addresses = '*'" >> ~/documentdb_test/postgresql.conf

      #         # Edit the postgresql.conf file
      #         echo "listen_addresses = '*'" >> ~/documentdb_test/postgresql.conf

      #       "

      #       echo "Setup complete. You are now ready to work with DocumentDB."
      #     EOF

          
        # docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
        # docker pull ghcr.io/${{ github.repository }}/documentdb:latest
        # docker rm -f documentdb 2>/dev/null || true