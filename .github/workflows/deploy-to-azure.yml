name: Deploy to GitHub Packages and Azure VM

on:
  push:
    branches:
      - main

jobs:
  # build:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v2

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1

  #     - name: Log in to GitHub Packages
  #       run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

  #     - name: Build and push Docker image
  #       run: |
  #         docker build -t ghcr.io/${{ github.repository }}/documentdb:latest . -f .devcontainer/Dockerfile
  #         docker push ghcr.io/${{ github.repository }}/documentdb:latest

  infra:
    runs-on: ubuntu-latest
    # needs: build

    steps:
      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Check and Create SSH Key
        id: create-ssh-key
        run: |
          mkdir -p ~/.ssh
          if [ ! -f ~/.ssh/id_rsa ]; then
            ssh-keygen -t rsa -b 4096 -C "ci-cd-pipeline" -f ~/.ssh/id_rsa -N ""
          fi
          echo "Private key:"
          cat ~/.ssh/id_rsa
          echo "::set-output name=private_key::$(awk '{printf "%s\\n", $0}' ~/.ssh/id_rsa)"
          echo "SSH key setup complete."

      # - name: Update GitHub Secret with Private Key
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     gh secret set AZURE_SSH_PRIVATE_KEY -b "${{ steps.create-ssh-key.outputs.private_key }}" -R ${{ github.repository }}
          
      - name: Create Azure VM if not exists
        run: |
          az vm create \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name TERMSMONITOR \
            --image Ubuntu2404 \
            --admin-username azureuser \
            --generate-ssh-keys \
            --size Standard_B1s \
            --output none || echo "VM already exists"

      - name: Get VM public IP
        id: get-vm-ip
        run: |
          echo "VM_IP=$(az vm show --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name TERMSMONITOR --show-details --query publicIps -o tsv)" >> $GITHUB_ENV
      
      - name: Set up SSH key
        id: setup-ssh-key
        run: |
          mkdir -p ~/.ssh
          az vm run-command invoke \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name TERMSMONITOR \
            --command-id RunShellScript \
            --scripts "mkdir -p /home/azureuser/.ssh && echo '${{ steps.create-ssh-key.outputs.private_key }}' > /home/azureuser/.ssh/id_rsa && chmod 600 /home/azureuser/.ssh/id_rsa" \
            --query "value[0].message" -o tsv
          ssh-keyscan -H ${{ env.VM_IP }} >> ~/.ssh/known_hosts
          echo "private_key=$(awk '{printf "%s\\n", $0}' ~/.ssh/id_rsa)" >> $GITHUB_OUTPUT

      - name: Install Docker on VM
        run: |
          echo ${{ steps.setup-ssh-key.outputs.private_key }}
          ssh -i '~/.ssh/id_rsa' -o StrictHostKeyChecking=no azureuser@${{ env.VM_IP }} << 'EOF'
            sudo apt-get update
            sudo apt-get install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
          EOF
    
  deploy:
    runs-on: ubuntu-latest
    needs: infra

    steps:
      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get VM public IP
        id: get-vm-ip
        run: |
          echo "VM_IP=$(az vm show --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name TERMSMONITOR --show-details --query publicIps -o tsv)" >> $GITHUB_ENV
      
      - name: Set up SSH key
        id: setup-ssh-key
        run: |
          mkdir -p ~/.ssh
          az vm run-command invoke \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name TERMSMONITOR \
            --command-id RunShellScript \
            --scripts "cat /home/azureuser/.ssh/id_rsa" \
            --query "value[0].message" -o tsv > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ env.VM_IP }} >> ~/.ssh/known_hosts
          echo "::set-output name=private_key::$(awk '{printf "%s\\n", $0}' ~/.ssh/id_rsa)"

      - name: Pull and run Docker image on VM
        run: |
          ssh -o StrictHostKeyChecking=no azureuser@${{ env.VM_IP }} << 'EOF'
            sudo docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
            sudo docker pull ghcr.io/${{ github.repository }}/documentdb:latest
            sudo docker rm -f documentdb 2>/dev/null || true
            sudo docker run -p 9712:9712 -v $(pwd):/home/documentdb/code -it ghcr.io/${{ github.repository }}/documentdb /bin/bash 
          EOF